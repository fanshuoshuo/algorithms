
#include <vector>
#include <iostream>
using namespace std;
class sumItUp{
    private:
     int total;
     vector<int >  integers;
     vector<int >  sum;
     vector< vector<int> >  allSum;
     void backtracking(int k,int s);
    public :
    void  initional(int);
    void  readcase(int);
    void  computering();
    void  outResult();
};
 void  sumItUp::initional(int t){
         total=t;
         integers.clear();
         sum.clear();
         allSum.clear();
 }
 void  sumItUp::readcase(int n){
    int tmp;
     while(n--){
       cin>>tmp;
       integers.push_back(tmp);
     }
 
 }
 void  sumItUp::computering(){
     backtracking(0,total);
 }
 void sumItUp::backtracking(int k,int s){
     if(s==0){
        allSum.push_back(sum);
     }else if(s>0){
           for(int i=k;i<integers.size();i++){
                 if(i==k||integers[i]!=integers[i-1]){
                    sum.push_back(integers[i]);
                    backtracking(i+1,s-integers[i]);
                    sum.pop_back();
                 }
                   
           }
     }
 }
 void  sumItUp::outResult(){
    cout<<"Sums of "<<total<<":"<<endl;
    if(allSum.size()==0){
       cout<<"NONE"<<endl;
    }
    else{
        for(int i=0;i<allSum.size();i++){
           for(int k=0;k<allSum[i].size();k++){
                 if(k>0)
                       cout<<"+";
                  cout<<allSum[i][k];
           }
           cout<<endl;
        }
    }
 }
 
int main(){
  sumItUp siu;
  int t,n;
  while(cin>>t>>n&&(n)){
      siu.initional(t);
      siu.readcase(n);
      siu.computering();
      siu.outResult();
  }
  return 0;
}