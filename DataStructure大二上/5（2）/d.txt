
#include <queue>
#include <iostream>
#include <map>
#include <vector>
#include <string>
#include <algorithm>
using namespace std;
class Dependencies{
   private:
   int N;
   int ans;
   vector< vector<int> >  taskMap;
   map<int ,int>  numDen; 
   public:
   void initional(int n);
   void readcase();
   void computering();
   void outResult();
   
};
void Dependencies::initional(int n){
   N=n;
   taskMap.clear();
   taskMap.resize(N+1);
   
}
void Dependencies::readcase(){
  int temp,k;
  for(int i=1;i<=N;i++){
   cin>>temp;
   while(temp--){
   cin>>k;
   taskMap[i].push_back(k);
   }
  }
 /* for(int i=1;i<=N;i++)
    {for(int j=0;j<taskMap[i].size();j++)
      cout<<taskMap[i][j]<<"  ";
    cout<<endl;}*/
}
void Dependencies::computering(){
   int numDen[105];
   int mark[105];
   int next;
   for(int i=1;i<=N;i++){
    for(int m=1;m<=N;m++)
         mark[m]=0;
    numDen[i]=0;
    mark[i]=1;
    queue<int> q,s;
    int tmp;
    q.push(i);
    while(!q.empty()){
       tmp=q.front();
       q.pop();
       for(int j=0;j<taskMap[tmp].size();j++){
            next=taskMap[i][j];
            if(mark[next]==0){
                 mark[next]==1;
                 numDen[i]++;
                 q.push(next);
            }
                
       }
    }
  //  cout<<"flag"<<endl;
    int max=numDen[1];
    ans=1;
    for(i=1;i<=N;i++){
       if(max<numDen[i]){
         max=numDen[i];
         ans=i;
         }
    }    
  }
   
}
void Dependencies::outResult(){
 cout<<ans<<endl;
}
int main(){
  int N;
  Dependencies De;
  while(cin>>N&&N){
     De.initional(N);
     De.readcase();
     De.computering();
     De.outResult();
  }
  return 0;
}
