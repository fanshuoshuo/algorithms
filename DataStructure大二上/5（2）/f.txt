#include <iostream>  
#include <algorithm>  
#include <cstring>  
#include <queue>  
  
using namespace std;  
  
#define MAXV 10000  
#define MAXDEGREE 8  
  
#define NBASE 10  
#define NDIGITS 4  
  
// 图结构。  
struct graph  
{  
    int edges[MAXV][MAXDEGREE]; // 使用邻接表来表示边。  
    int degree[MAXV];       // 顶点所连接的边数。  
};  
  
bool processed[MAXV];  
bool discovered[MAXV];  
int parent[MAXV];  
  
// 输出最短路径的长度。  
int find_path(int start, int target)  
{  
    int steps = 1;  
  
    while (parent[target] != start)  
    {  
        steps++;  
        target = parent[target];  
    }  
  
    return steps;  
}  
  
// 使用宽度优先搜索。  
int  breadth_first_search(graph * g, int start, int target)  
{  
    queue < int > q;  
  
    q.push(start);  
    discovered[start] = true;  
    while (!q.empty())  
    {  
        int v = q.front();  
        q.pop();  
  
        // 遍历与数 v 相邻的数。  
        processed[v] = true;  
        for (int i = 0; i < g->degree[v]; i++)  
        {  
            if (discovered[g->edges[v][i]] == false)  
            {  
                q.push(g->edges[v][i]);  
                discovered[g->edges[v][i]] = true;  
                parent[g->edges[v][i]] = v;  
            }  
  
            // 若未处理则检测是否为目标数。  
            if (processed[g->edges[v][i]] == false)  
                if (g->edges[v][i] == target)  
                    return find_path(start, target);  
        }  
    }  
      
    return -1;  
}  
  
// 生成与数 current 相连的八个数。  
void generate_neighbor(int current, int neighbor[])  
{  
    int digits[NDIGITS], temp[NDIGITS], count = 0;  
  
    // 将数 current 拆分为数字。  
    memset(digits, 0, sizeof(digits));  
    while (current)  
    {  
        digits[count++] = current % NBASE;  
        current /= NBASE;  
    }  
  
    // 生成相邻数。  
    count = 0;  
    for (int i = 0; i < MAXDEGREE; i++)  
    {  
        memcpy(temp, digits, sizeof(digits));  
  
        temp[i / 2] += ((i % 2) ? -1 : 1);  
        if (temp[i / 2] >= 0)  
            temp[i / 2] %= NBASE;  
        else  
            temp[i / 2] += NBASE;  
  
        int number = 0;  
        for (int j = NDIGITS - 1; j >= 0; j--)  
            number = number * NBASE + temp[j];  
  
        neighbor[count++] = number;  
    }  
}  
  
// 初始化图。  
void initialize_graph(graph * g)  
{  
    // 初始化宽度优先搜索所使用的标记。  
    memset(processed, false, sizeof(processed));  
    memset(discovered, false, sizeof(discovered));  
    memset(parent, -1, sizeof(parent));  
    memset(g->degree, 0, sizeof(g->degree));  
      
    for (int i = 0; i < MAXV; i++)  
    {  
        int neighbor[MAXDEGREE];  
        generate_neighbor(i, neighbor);  
        memcpy(g->edges[i], neighbor, sizeof(neighbor));  
        g->degree[i] = MAXDEGREE;  
    }  
}  
  
bool cmp(int x, int y)  
{  
    return x > y;  
}  
  
// 从图中移除与数 forbidden 相连的边。  
void remove_edge(graph * g, int forbidden)  
{  
    for (int i = 0; i < g->degree[forbidden]; i++)  
    {  
        int v = g->edges[forbidden][i];  
        for (int j = 0; j < g->degree[v]; j++)  
            if (g->edges[v][j] == forbidden)  
            {  
                g->edges[v][j] = 0;  
                sort(g->edges[v], g->edges[v] + MAXDEGREE, cmp);  
                g->degree[v]--;  
                break;  
            }  
    }  
      
    g->degree[forbidden] = 0;  
    memset(g->edges[forbidden], 0, MAXDEGREE * sizeof(int));  
}  
  
// 将字符串表示的数值转换为整数。  
int read(void)  
{  
    int digit, number = 0;  
      
    for (int i = 0; i < NDIGITS; i++)  
    {  
        cin >> digit;  
        number = number * NBASE + digit;  
    }  
  
    return number;  
}  
  
int main(int ac, char *av[])  
{  
    int cases, start, target, forbidden, nforbidden;  
    graph g;  
  
    cin >> cases;  
    while (cases--)  
    {  
        // 构建图。  
        initialize_graph(&g);  
  
        start = read();  
        target = read();  
  
        cin >> nforbidden;  
        for (int i = 0; i < nforbidden; i++)  
        {  
            forbidden = read();  
            remove_edge(&g, forbidden);  
        }  
  
        // 若给定的初始状态和目标状态相同，则不需按动按钮。  
        if (start == target)  
        {  
            cout << "0" << endl;  
            continue;  
        }  
  
        // 若给定的初始状态数或目标状态数其度为 0，则不可能完成。  
        if (g.degree[start] == 0 || g.degree[target] == 0)  
        {  
            cout << "-1" << endl;  
            continue;  
        }  
  
        // 使用宽度优先搜索找最短路径长度。  
        cout << breadth_first_search(&g, start, target) << endl;  
    }  
  
    return 0;  
}  