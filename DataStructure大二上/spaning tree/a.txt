#include<iostream>
#include<cstdio>
#include<cstring>
using namespace std;
const int maxn=30010;

class unionFind{
private:
	int father[maxn];
	int rank[maxn];
	int n,m;
	int cnt,max;
public:
	void initial();
	void readCase();
	void computing();
	void outResult();
	int find(int x);
	void Union(int x,int y);
};

int unionFind::find(int x){
    if(x!=father[x]) father[x]=find(father[x]);
    return father[x];
}

void unionFind::Union(int x,int y){
    x=find(x);
    y=find(y);
    if(x==y) return ;
    if(rank[x]>rank[y]){
        father[y]=x;
        rank[x]+=rank[y];
    }
    else{
        rank[y]+=rank[x];
        father[x]=y;
    }
}

void unionFind::initial(){
	cin>>n>>m;
	for(int i=1;i<=n;i++){
        father[i]=i;
        rank[i]=1;
    }
    cnt=0;
    max=0;
}

void unionFind::readCase(){
	for(int i=0;i<m;i++){
		int a,b;
		cin>>a>>b;
		Union(a,b);
	}
}

void unionFind::computing(){
	for(int i=1;i<=n;i++){
        if(rank[i]>max) max=rank[i];
    }
}

void unionFind::outResult(){
	cout<<max<<endl;
}

int main(){
    int t;
    unionFind test;
    cin>>t;
    
    while(t--){
    	test.initial();
    	test.readCase();
    	test.computing();
    	test.outResult();
    }
    return 0;
}