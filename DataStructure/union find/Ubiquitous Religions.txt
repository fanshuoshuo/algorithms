//Code here
//Code here
#include<iostream>
#include<cstdio>
#include<cstring>
using namespace std;
const int maxn=50010;

class unionFind{
private:
	int father[maxn];
	int rank[maxn];
	int n,m;
	int max;
public:
	void initial(int ,int );
	void readCase();
	void computing();
	void outResult();
	int find(int x);
	void Union(int x,int y);
};

int unionFind::find(int x){
    if(x!=father[x]) father[x]=find(father[x]);
    return father[x];
}

void unionFind::Union(int x,int y){
    x=find(x);
    y=find(y);
    if(x==y) return ;
    if(rank[x]>rank[y]){
        father[y]=x;
        rank[x]+=rank[y];
    }
    else{
        rank[y]+=rank[x];
        father[x]=y;
    }
}

void unionFind::initial(int a,int b){
    n=a;m=b;
	for(int i=1;i<=n;i++){
        father[i]=i;
        rank[i]=1;
    }
 
    max=0;
}

void unionFind::readCase(){
	for(int i=0;i<m;i++){
		int a,b;
		cin>>a>>b;
		Union(a,b);
	}
}

void unionFind::computing(){
    int cnt=0;
    static int num=1;
	for(int i=1;i<=n;i++){
        if(father[i]==i) cnt++;
    }
    cout<<"Case "<<num<<": "<<cnt<<endl;
    num++;
   
}

void unionFind::outResult(){
	
}

int main(){
    int t;
    unionFind test;
    int n,m;
    while(cin>>n>>m){
        if(n==0&&m==0)
           break;
    	test.initial(n,m);
    	test.readCase();
    	test.computing();
    	test.outResult();
    }
    return 0;
}