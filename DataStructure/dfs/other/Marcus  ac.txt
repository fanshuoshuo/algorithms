//Code here
#include<iostream>
#include<vector>
#include<string>
#include<algorithm>
using namespace std;
class Marcus
{
  private:
      int R,C;
      vector<string> matrix;
      string road[6];
      string ans[7];
  public:
  void initional(int,int );
  void readcase();
  void computering ();
  void outResult();
};
 void Marcus::initional(int r,int c){
  R=r;C=c;
  matrix.clear();
  matrix.resize(r+1); //the aditional one rows for boundaries
 }
  void Marcus:: readcase(){
   for(int i = 1; i < matrix.size(); i++){
        cin >> matrix[i];
        matrix[i] = 'x' + matrix[i] + 'x'; // add left and right boundaries
    }
     for(int i = 0; i < C+2; i++){
        matrix[0].push_back('X');  // top boundary
        }
  }
  void Marcus::computering (){
   char path[7]={'I','E','H','O','V','A','#'};
      for(int j=C, i=R;j>=1;j--)
          if(matrix[i][j]=='@'){
               for(int k=0;k<7;k++){
                  if     (matrix[i-1][j]==path[k]) {i--;ans[k]="forth";}
                  else if(matrix[i][j-1]==path[k]) {j--;ans[k]="left";}
                  else if(matrix[i][j+1]==path[k]) {j++;ans[k]="right";}
                  
               }
         return ;
          }
  
}
  void Marcus::outResult(){
  for(int i=0;i<6;i++){
   cout<<ans[i]<<" ";
   }
   cout<<ans[6]<<endl;
  }
int main(){
   int N;
   Marcus mr;
   cin>>N;
   int r,c;
   while(N--){
      cin>>r>>c;
	  mr.initional(r,c);
	  mr.readcase();
	  mr.computering ();
	  mr.outResult();
   }
  // system("pause");
   return 0;
}
