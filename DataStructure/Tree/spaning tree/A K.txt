#include<iostream>
#include<map>
#include<string>
#include<algorithm>
using namespace std;
const int maxn = 500;
int father[maxn];
struct City{
  string c1;
  string c2;
  int w;
}city[maxn*400];
void build(int n){
  for(int i = 0;i < n;i++){
    father[i] = i;
  }
}
int find(int x){
  if(x != father[x]){
    father[x] = find(father[x]);
  }
  return father[x];
}
void united_set(int x , int y){
  int xx = find(x);
  int yy = find(y);
  if(xx != yy){
    father[xx] = yy;
  }
}
bool cmp(City one , City two){ return one.w>two.w;}
class HeavyCargo{
private:
  map<string, int> c_num;
  int result;
  int N;
  int R;
  string start;
  string end;
public:
  void initial();
  void readcase(int n , int r);
  void computing();
  void out(int n);
};
void HeavyCargo::initial(){
  c_num.clear();
  result = 1000000;
  start.clear();
  end.clear();
}
void HeavyCargo::readcase(int n , int r){
  build(n);
  N = n;
  R = r;
  int wei;
  string str1 , str2;
  map<string, int>::iterator it;
  for(int i = 0;i < r;i++){
    cin >> str1 >> str2 >> wei;
    city[i].c1 = str1;
    city[i].c2 = str2;
    city[i].w = wei;
    it = c_num.find(str1);
    if(it == c_num.end()){
      c_num[str1] = 0;
    }
    it = c_num.find(str2);
    if(it == c_num.end()){
      c_num[str2] = 0;
    }
  }
  cin >> start >> end;
  sort(city , city+r, cmp);
}
void HeavyCargo::computing(){
  int i = 0;
  for(map<string, int>::iterator it = c_num.begin();it != c_num.end();it++){
    it -> second = i;
    i++;
  }
  for(i = 0;i < R;i++){
    if(find(c_num[city[i].c1]) != find(c_num[city[i].c2])){
      if(result > city[i].w){
        result = city[i].w;
      }
      united_set(c_num[city[i].c1] , c_num[city[i].c2]);
    }
    if(find(c_num[start]) == find(c_num[end])){
      break;
    }
  }
}
void HeavyCargo::out(int n){
  cout << "Scenario #" << n <<endl;
  cout << result << " tons" << endl << endl;
}
int main(){
  HeavyCargo H;
  int n , r , count = 1;
  while(cin >> n >> r && (n||r)){
    H.initial();
    H.readcase(n , r);
    H.computing();
    H.out(count);
    count++;
  }
  return 0;
}